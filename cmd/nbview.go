package main

import (
	"encoding/base64"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
)

// gzip first?
// also - generate from static files
var html string = "PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9J3V0Zi04JyAvPgogICAgICAgIDx0aXRsZT5uYnZpZXdlci5qczwvdGl0bGU+CgogICAgPGxpbmsgcmVsPSdzdHlsZXNoZWV0JyBocmVmPSdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9wcmlzbS8xLjUuMS90aGVtZXMvcHJpc20ubWluLmNzcycvPgogICAgPHNjcmlwdCBzcmM9J2h0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL21hcmtlZC8wLjMuNi9tYXJrZWQubWluLmpzJz48L3NjcmlwdD4gICAgCiAgICA8c2NyaXB0IHNyYz0naHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcHJpc20vMS41LjEvcHJpc20ubWluLmpzJyBkYXRhLW1hbnVhbD48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9wcmlzbS8xLjUuMS9jb21wb25lbnRzL3ByaXNtLXB5dGhvbi5taW4uanMnIGRhdGEtbWFudWFsPjwvc2NyaXB0PgoKICAgIDxzdHlsZSB0eXBlPSd0ZXh0L2Nzcyc+CiAgICAgICAgYm9keSB7CiAgICAgICAgICAgIGZvbnQ6IDAuOGVtIEFyaWFsLCBzYW5zLXNlcmlmOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlOwogICAgICAgIH0KICAgIDwvc3R5bGU+CgogICAgPCEtLSBuYnZpZXdlci5qcyAtLT4KICAgIDxsaW5rIHJlbD0nc3R5bGVzaGVldCcgaHJlZj0nbmJ2LmNzcycvPgogICAgPHNjcmlwdCBzcmM9J25idi5qcyc+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0nbm90ZWJvb2suanMnPjwvc2NyaXB0Pgo8L2hlYWQ+Cjxib2R5PgoKPGRpdiBpZD0nZG9jJz4KCjwvZGl2PgoKCjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4KICAgIHZhciBkID0gZG9jdW1lbnQKICAgIHZhciBkb2MgPSBkLmdldEVsZW1lbnRCeUlkKCdkb2MnKQogICAgbmJ2LnJlbmRlcihuYiwgZG9jKQo8L3NjcmlwdD4KCjwvYm9keT4KPC9odG1sPgoK"
var css string = "ZGl2Lm5iZG9jdW1lbnQgewogICAgbWF4LXdpZHRoOiA5NjBweDsKICAgIGJvcmRlcjogMXB4IHNvbGlkwqAjY2NjOwogICAgbWFyZ2luOiAxZW0gYXV0bzsKICAgIHBhZGRpbmc6IDEuNWVtIDEuNWVtIDEuNWVtIDdlbTsKICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOwogICAgLypib3JkZXItcmFkaXVzOiAxMHB4OyovCiAgICBib3gtc2hhZG93OiAwIDAgMTBweCAjY2NjOwp9CmRpdi5uYmRvY3VtZW50IGRpdi5jZWxsIHsKICAgIHBhZGRpbmctYm90dG9tOiAuNWVtOwogICAgLypwYWRkaW5nLXRvcDogLjFlbTsqLwp9CmRpdi5uYmRvY3VtZW50IGRpdiB7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7IC8qIGZvciBleGNvdW50cyAqLwp9CmRpdi5uYmRvY3VtZW50IGRpdi5jZWxsIHNwYW4uZXhjb3VudCB7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIHRvcDogNXB4OyBsZWZ0OiAtNy41ZW07CiAgICB3aWR0aDogN2VtOwogICAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTsKICAgIHRleHQtYWxpZ246IHJpZ2h0Owp9CmRpdi5uYmRvY3VtZW50IHNwYW4uZXhjb3VudC1pbiB7CiAgICBjb2xvcjogIzMwM2ZiYTsKfQpkaXYubmJkb2N1bWVudCBzcGFuLmV4Y291bnQtb3V0IHsKICAgIGNvbG9yOiAjZGU0ODE1OwogICAgdG9wOiAwICFpbXBvcnRhbnQ7Cn0KZGl2Lm5iZG9jdW1lbnQgZGl2LmNlbGwgcHJlLmNvZGUtY2VsbCB7CiAgICBiYWNrZ3JvdW5kOiAjZjdmN2Y3OwogICAgYm9yZGVyOiAxcHggc29saWQgI2NmY2ZjZjsKICAgIHBhZGRpbmc6IC40ZW07CiAgICBtYXJnaW4tYm90dG9tOiAwOwogICAgbWFyZ2luLXRvcDogMDsKICAgIGJvcmRlci1yYWRpdXM6IDJweDsKICAgIG92ZXJmbG93LXg6IHNjcm9sbDsKICAgIG1pbi1oZWlnaHQ6IC44NWVtOwp9CmRpdi5uYmRvY3VtZW50IGRpdi5jZWxsLW91dHB1dCB7CiAgICBtaW4taGVpZ2h0OiAxZW07Cn0KZGl2Lm5iZG9jdW1lbnQgZGl2LnBsYWluLWh0bWwgewogICAgb3ZlcmZsb3c6IHNjcm9sbDsKfQoKZGl2Lm5iZG9jdW1lbnQgdGFibGUuZGF0YWZyYW1lIHsKICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7CiAgICB0ZXh0LWFsaWduOiBsZWZ0Owp9CmRpdi5uYmRvY3VtZW50IHRhYmxlLmRhdGFmcmFtZSB0aCwgZGl2Lm5iZG9jdW1lbnQgdGFibGUuZGF0YWZyYW1lIHRkIHsKICAgIHBhZGRpbmc6IDNweDsKfQ=="
var js string = ""

func main() {
	if len(os.Args) != 2 {
		log.Fatal("Not supplied a filename")
	}

	// read input notebook
	fn := os.Args[1]
	cn, err := ioutil.ReadFile(fn)
	if err != nil {
		log.Fatal(err)
	}

	tdir, er := ioutil.TempDir("", "nb_")
	// tmp, er := ioutil.TempFile("", "nb_")
	if er != nil {
		log.Fatal(er)
	}

	htmlstr, _ := base64.StdEncoding.DecodeString(html)
	if err := ioutil.WriteFile(filepath.Join(tdir, "index.html"), []byte(htmlstr), 0666); err != nil {
		log.Fatal(err)
	}
	cssstr, _ := base64.StdEncoding.DecodeString(css)
	if err := ioutil.WriteFile(filepath.Join(tdir, "nbv.css"), []byte(cssstr), 0666); err != nil {
		log.Fatal(err)
	}
	jsstr, _ := base64.StdEncoding.DecodeString(js)
	if err := ioutil.WriteFile(filepath.Join(tdir, "nbv.js"), []byte(jsstr), 0666); err != nil {
		log.Fatal(err)
	}
	if err := ioutil.WriteFile(filepath.Join(tdir, "notebook.js"), append([]byte("var nb = "), cn...), 0666); err != nil {
		log.Fatal(err)
	}

	// launch browser
	tfn := filepath.Join(tdir, "index.html")

	var eerr error
	switch runtime.GOOS {
	case "windows":
		eerr = exec.Command("cmd", "/c", "start", tfn).Start()
	case "darwin":
		eerr = exec.Command("open", tfn).Start()
	case "linux", "freebsd", "netbsd", "openbsd":
		eerr = exec.Command("xdg-open", tfn).Start()
	default:
		log.Fatalf("%s not supported", runtime.GOOS)
	}
	if eerr != nil {
		log.Fatal(eerr)
	}

}
